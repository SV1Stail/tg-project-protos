// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: publisher/publisher.proto

package publisher_pb

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Publisher_PublishScheduled_FullMethodName = "/publisher.Publisher/PublishScheduled"
	Publisher_PublishNow_FullMethodName       = "/publisher.Publisher/PublishNow"
)

// PublisherClient is the client API for Publisher service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PublisherClient interface {
	PublishScheduled(ctx context.Context, in *PublishScheduledRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	PublishNow(ctx context.Context, in *PublishNowRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type publisherClient struct {
	cc grpc.ClientConnInterface
}

func NewPublisherClient(cc grpc.ClientConnInterface) PublisherClient {
	return &publisherClient{cc}
}

func (c *publisherClient) PublishScheduled(ctx context.Context, in *PublishScheduledRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, Publisher_PublishScheduled_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publisherClient) PublishNow(ctx context.Context, in *PublishNowRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, Publisher_PublishNow_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PublisherServer is the server API for Publisher service.
// All implementations must embed UnimplementedPublisherServer
// for forward compatibility.
type PublisherServer interface {
	PublishScheduled(context.Context, *PublishScheduledRequest) (*empty.Empty, error)
	PublishNow(context.Context, *PublishNowRequest) (*empty.Empty, error)
	mustEmbedUnimplementedPublisherServer()
}

// UnimplementedPublisherServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPublisherServer struct{}

func (UnimplementedPublisherServer) PublishScheduled(context.Context, *PublishScheduledRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishScheduled not implemented")
}
func (UnimplementedPublisherServer) PublishNow(context.Context, *PublishNowRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishNow not implemented")
}
func (UnimplementedPublisherServer) mustEmbedUnimplementedPublisherServer() {}
func (UnimplementedPublisherServer) testEmbeddedByValue()                   {}

// UnsafePublisherServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PublisherServer will
// result in compilation errors.
type UnsafePublisherServer interface {
	mustEmbedUnimplementedPublisherServer()
}

func RegisterPublisherServer(s grpc.ServiceRegistrar, srv PublisherServer) {
	// If the following call pancis, it indicates UnimplementedPublisherServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Publisher_ServiceDesc, srv)
}

func _Publisher_PublishScheduled_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishScheduledRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublisherServer).PublishScheduled(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Publisher_PublishScheduled_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublisherServer).PublishScheduled(ctx, req.(*PublishScheduledRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Publisher_PublishNow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishNowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublisherServer).PublishNow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Publisher_PublishNow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublisherServer).PublishNow(ctx, req.(*PublishNowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Publisher_ServiceDesc is the grpc.ServiceDesc for Publisher service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Publisher_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "publisher.Publisher",
	HandlerType: (*PublisherServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PublishScheduled",
			Handler:    _Publisher_PublishScheduled_Handler,
		},
		{
			MethodName: "PublishNow",
			Handler:    _Publisher_PublishNow_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "publisher/publisher.proto",
}
